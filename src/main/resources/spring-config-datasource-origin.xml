<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:content="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <aop:aspectj-autoproxy/>
    <content:component-scan base-package="com.bule.dbrw"></content:component-scan>
    <content:property-placeholder location="classpath:dbconfig.properties"/>

    <bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <!--最大连接池数量-->
        <property name="maxActive" value="15"/>
        <!--连接池初始化数量 add-->
        <property name="initialSize" value="2"/>
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁,需手动置为非公平锁-->
        <property name="maxWait" value="60000"/>
        <!-- 	最小连接池数量-->
        <property name="minIdle" value="2"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="180000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <!--建议配置为true，不影响性能，并且保证安全性。
        申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
        执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="true"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="false"/>
        <!-- 	归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false"/>
        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="false"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true>-->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="-1"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="slowSqlMillis" value="500"/>
                    <property name="logSlowSql" value="true"/>
                </bean>
            </list>
        </property>

        <!--配置了maxWait druid默认使用公平锁,手动设置使用非公平锁-->
        <property name="useUnfairLock" value="true"/>
        <!--可以看到未关闭连接的具体堆栈信息,方便查看链接泄露-->
        <property name="removeAbandoned" value="true"/>
    </bean>


    <bean id="masterDataSource" parent="abstractDataSource">
        <property name="url" value="${master.jdbc.url}"/>
        <property name="username" value="${master.jdbc.username}"/>
        <property name="password" value="${master.jdbc.password}"/>
        <!--数据源名字-->
        <property name="name" value="master"/>
    </bean>

    <!-- sequence数据源 -->
    <bean id="slaveDataSource" parent="abstractDataSource">
        <property name="url" value="${slave.jdbc.url}"/>
        <property name="username" value="${slave.jdbc.username}"/>
        <property name="password" value="${slave.jdbc.password}"/>
        <!--数据源名字-->
        <property name="name" value="slave"/>
    </bean>
    <!--多数据源配置-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.lookup.IsolationLevelDataSourceRouter">
        <property name="defaultTargetDataSource" ref="masterDataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="ISOLATION_SERIALIZABLE" value-ref="masterDataSource"/>
                <entry key="ISOLATION_REPEATABLE_READ" value-ref="slaveDataSource"/>
            </map>
        </property>
    </bean>

    <!-- 该包下的类支持注解，表示会被当作{@code mybatis mapper}处理 配置了之后表示可以自动引入mapper类-->
    <mybatis:scan base-package="com.bule.dbrw.dao"/>
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- mybatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-configure.xml"/>
    </bean>

</beans>